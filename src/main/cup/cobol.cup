package jcob;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import jcob.bean.*;
import jcob.bean.data.*;
import jcob.bean.environment.*;
import jcob.bean.identification.*;
import jcob.bean.procedure.*;

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

// Keywords
terminal DIVISION;
terminal SECTION;

terminal IDENTIFICATION;
terminal ID;
terminal PROGRAMID;
terminal AUTHOR;
terminal INSTALLATION;
terminal SECURITY;

terminal ENVIRONMENT;
terminal CONFIGURATION;
terminal INPUTOUTPUT;

terminal DATA;
terminal FILE;
terminal WORKINGSTORAGE;
terminal LOCALSTORAGE;
terminal LINKAGE;

terminal PROCEDURE;
terminal SCREEN;
terminal PIC;
terminal LINE;
terminal COL;
terminal VALUE;
terminal FROM;
terminal MOVE;
terminal DISPLAY;
terminal ADD;
terminal TO;
terminal STOP;
terminal RUN;
terminal END;
terminal PROGRAM;
terminal LPAREN;
terminal RPAREN;

terminal java.lang.String IDENTIFIER;

// Literals
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.String NUMERIC;
terminal java.lang.String STRING_LITERAL;

// Operators
terminal DOT;

// Our simplified grammar
non terminal CobolFile                          cobol_file;
/* Identification */
non terminal IdentificationDivision             identification_division_opt;
non terminal LinkedList<IdentificationElement>  identification_elements_opt;
non terminal IdentificationElement              identification_element;
/* Environment */
non terminal EnvironmentDivision                environment_division_opt;
non terminal ConfigurationSection               configuration_section_opt;
non terminal InputOutputSection                 input_output_section_opt;
/* Data */
non terminal DataDivision                       data_division_opt;
non terminal FileSection                        data_file_section_opt;
non terminal WorkingStorageSection              data_working_storage_section_opt;
non terminal LinkedList<DataEntry>              data_working_storage_elements_opt;
non terminal DataEntry                          data_working_storage_element;
non terminal LocalStorageSection                data_local_storage_section_opt;
non terminal LinkageSection                     data_linkage_section_opt;
non terminal ScreenSection                      data_screen_section_opt;
non terminal LinkedList<DataEntry>              data_screen_elements_opt;
non terminal DataEntry                          data_screen_element;
non terminal LinkedList<DataScreenInstruction>  data_screen_instructions_opt;
non terminal DataScreenInstruction              data_screen_instruction;
/* Procedure */
non terminal ProcedureDivision                  procedure_division_opt;
non terminal LinkedList<ProcedureEntry>         procedure_elements_opt;
non terminal ProcedureEntry                     procedure_element;
non terminal ProcedureMoveInstruction           procedure_move_instruction;
non terminal ProcedureAddInstruction            procedure_add_instruction;
non terminal ProcedureDisplayInstruction        procedure_display_instruction;
/* End */
non terminal                                    end_division;
/* Standard */
non terminal java.lang.String                   type;
non terminal java.lang.String                   alpha_type;
non terminal java.lang.String                   numeric_type;
non terminal java.lang.String                   level;
non terminal java.lang.String                   indentifier_integer;

// TODO
start with cobol_file;

cobol_file ::=
    identification_division_opt:id
    environment_division_opt:env 
    data_division_opt:data
    procedure_division_opt:proc
    end_division                                                    {: RESULT = new CobolFile(id, env, data, proc); :}
    ;

/*******************
 * Identification
 * TODO   |  DATEWRITTEN DOT IDENTIFIER DOT
          |  DATECOMPILED DOT IDENTIFIER DOT
*******************/
identification_division_opt ::= 
    IDENTIFICATION DIVISION DOT identification_elements_opt:il      {: RESULT = new IdentificationDivision(il); :}
    |                                                               {: RESULT = null; :}
    ;

identification_elements_opt ::= 
    identification_elements_opt:l identification_element:e          {: l.add(e); RESULT = l; :}
    |                                                               {: RESULT = new LinkedList<IdentificationElement>(); :}
    ;

identification_element ::=
    PROGRAMID DOT IDENTIFIER:i DOT                                  {: RESULT = new IdentificationProgramId(i); :}
  | AUTHOR DOT IDENTIFIER:i DOT                                     {: RESULT = new IdentificationAuthor(i); :}
  | INSTALLATION DOT IDENTIFIER DOT
  | SECURITY DOT IDENTIFIER DOT
  ;

/*******************
 * Environment
*******************/
environment_division_opt ::= 
    ENVIRONMENT DIVISION DOT
    configuration_section_opt:c
    input_output_section_opt:ios                                    {: RESULT = new EnvironmentDivision(c, ios); :}
    |                                                               {: RESULT = null; :}
    ;

configuration_section_opt ::= 
    CONFIGURATION SECTION DOT                                       {: RESULT = new ConfigurationSection(); :}
    |                                                               {: RESULT = null; :} 
    ;

input_output_section_opt ::= 
    INPUTOUTPUT SECTION DOT                                         {: RESULT = new InputOutputSection(); :}
    |                                                               {: RESULT = null; :} 
    ;

/*******************
 * Data
*******************/
data_division_opt ::= 
    DATA DIVISION DOT
    data_file_section_opt:fs
    data_working_storage_section_opt:wss
    data_local_storage_section_opt:lss
    data_linkage_section_opt:ls
    data_screen_section_opt:ss                                      {: RESULT = new DataDivision(fs, wss, lss, ls, ss); :} 
    |                                                               {: RESULT = null; :} 
    ;

data_file_section_opt ::= 
    FILE SECTION DOT                                                {: RESULT = new FileSection(); :}
    |                                                               {: RESULT = null; :} 
    ;

data_working_storage_section_opt ::= 
    WORKINGSTORAGE SECTION DOT data_working_storage_elements_opt:l  {: RESULT = new WorkingStorageSection(l); :}
    |                                                               {: RESULT = null; :} 
    ;

data_working_storage_elements_opt ::= 
    data_working_storage_elements_opt:l
    data_working_storage_element:e                                  {: l.add(e); RESULT = l; :}
    |                                                               {: RESULT = new LinkedList<DataEntry>(); :}
    ;

data_working_storage_element ::=
    level:l IDENTIFIER:i PIC type:t DOT                             {: RESULT = new DataElement(l, i, t); :}
  | level:l IDENTIFIER:i DOT                                        {: RESULT = new DataRecord(l, i); :}
  ;

data_local_storage_section_opt ::= 
    LOCALSTORAGE SECTION DOT                                        {: RESULT = new LocalStorageSection(); :}
    |                                                               {: RESULT = null; :} 
    ;

data_linkage_section_opt ::= 
    LINKAGE SECTION DOT                                             {: RESULT = new LinkageSection(); :}
    |                                                               {: RESULT = null; :} 
    ;

data_screen_section_opt ::= 
    SCREEN SECTION DOT data_screen_elements_opt:l                   {: RESULT = new ScreenSection(l); :}
    |                                                               {: RESULT = null; :} 
    ;

data_screen_elements_opt ::= 
    data_screen_elements_opt:l
    data_screen_element:e                                           {: l.add(e); RESULT = l; :}
    |                                                               {: RESULT = new LinkedList<DataEntry>(); :}
    ;

data_screen_element ::=
    level:l data_screen_instructions_opt:i DOT                      {: RESULT = new DataScreenEntry(l, i); :}
  | level:l IDENTIFIER:i DOT                                        {: RESULT = new DataRecord(l, i); :}
  ;

data_screen_instructions_opt ::=
    data_screen_instructions_opt:l
    data_screen_instruction:e                                       {: l.add(e); RESULT = l; :}
    |                                                               {: RESULT = new LinkedList<DataScreenInstruction>(); :}
    ;

data_screen_instruction ::=
    LINE indentifier_integer:i                                      {: RESULT = new DataScreenLineInstruction(i); :}
  | COL indentifier_integer:i                                       {: RESULT = new DataScreenColInstruction(i); :}
  | VALUE STRING_LITERAL:s                                          {: RESULT = new DataScreenValueInstruction(s); :}
  | PIC type:t                                                      {: RESULT = new DataScreenPicInstruction(t); :}
  | FROM indentifier_integer:i                                      {: RESULT = new DataScreenFromInstruction(i); :}
  ;

/*******************
 * Procedure
*******************/
procedure_division_opt ::= 
    PROCEDURE DIVISION DOT procedure_elements_opt:l                 {: RESULT = new ProcedureDivision(l); :}
    |                                                               {: RESULT = null; :}
    ;

procedure_elements_opt ::= 
    procedure_elements_opt:l
    procedure_element:e                                             {: l.add(e); RESULT = l; :}
    |                                                               {: RESULT = new LinkedList<ProcedureEntry>(); :}
    ;

procedure_element ::=
    IDENTIFIER:i DOT                                                {: RESULT = new ProcedureRecord(i); :}
  | procedure_move_instruction:i                                    {: RESULT = i; :}
  | procedure_add_instruction:i                                     {: RESULT = i; :}
  | procedure_display_instruction:i                                 {: RESULT = i; :}
  ;

procedure_move_instruction ::=
    MOVE indentifier_integer:i1 TO IDENTIFIER:i2 DOT                {: RESULT = new ProcedureMoveInstruction(i1, i2); :}
    ;

procedure_add_instruction ::=
    ADD indentifier_integer:i1 TO IDENTIFIER:i2 DOT                 {: RESULT = new ProcedureAddInstruction(i1, i2); :}
    ;

procedure_display_instruction ::=
    DISPLAY IDENTIFIER:i DOT                                        {: RESULT = new ProcedureDisplayInstruction(i); :}
    ;

/*******************
 * End
*******************/
end_division ::=
    STOP RUN DOT
  | END PROGRAM IDENTIFIER DOT
  | /* TODO A supprimer */
  ;

/*******************
 * Standard
*******************/
type ::=
    alpha_type:a                                                    {: RESULT = a; :}
  | numeric_type:n                                                  {: RESULT = n; :}
  | IDENTIFIER:i numeric_type:n                                     {: RESULT = i + n; :}
  ;

alpha_type ::=
    IDENTIFIER:i                                                    {: RESULT = i; :} 
  | IDENTIFIER:i LPAREN INTEGER_LITERAL:il RPAREN                   {: RESULT = i + '(' + String.valueOf(il) + ')'; :} 
  ;

numeric_type ::=
    INTEGER_LITERAL:il                                              {: RESULT = String.valueOf(il); :} 
  | INTEGER_LITERAL:il LPAREN INTEGER_LITERAL:il2 RPAREN            {: RESULT = String.valueOf(il) + '(' + String.valueOf(il2) + ')'; :} 
  | INTEGER_LITERAL:il IDENTIFIER:i INTEGER_LITERAL:il2             {: RESULT = String.valueOf(il) + i + String.valueOf(il2); :} 
  | INTEGER_LITERAL:il LPAREN INTEGER_LITERAL:il2 RPAREN 
    IDENTIFIER:i INTEGER_LITERAL:il3                                {: RESULT = String.valueOf(il) + '(' + String.valueOf(il2) + ')' + i + String.valueOf(il3); :} 
  | INTEGER_LITERAL:il IDENTIFIER:i INTEGER_LITERAL:il2 
    LPAREN INTEGER_LITERAL:il3 RPAREN                               {: RESULT = String.valueOf(il) + i + String.valueOf(il2) + '(' + String.valueOf(il3) + ')'; :} 
  | INTEGER_LITERAL:il LPAREN INTEGER_LITERAL:il2 RPAREN 
    IDENTIFIER:i INTEGER_LITERAL:il3 LPAREN INTEGER_LITERAL:il4 
    RPAREN                                                          {: RESULT = String.valueOf(il) + '(' + String.valueOf(il2) + ')' + i + String.valueOf(il3) + '(' + String.valueOf(il4) + ')'; :} 
  ;
  
level ::=
    INTEGER_LITERAL:i                                               {: RESULT = String.valueOf(i); :} 
  | NUMERIC:n                                                       {: RESULT = n; :} 
  ;

indentifier_integer ::=
    INTEGER_LITERAL:i                                               {: RESULT = String.valueOf(i); :} 
  | IDENTIFIER:i                                                    {: RESULT = i; :} 
  ;